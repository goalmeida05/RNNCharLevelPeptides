# -*- coding: utf-8 -*-
"""inf721_inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17qSx8WQ0M7MVcWTngiQtTZBMfZdyiCP9
"""

import torch
import torch.nn as nn
from collections import Counter
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict
from inf721_model import PeptideosRNNLanguageModel  # Importa a classe do modelo
from inf721_dataset import PeptideosDataset
text_dataset = PeptideosDataset('Dados.txt')

import torch.nn.functional as F
def generate(model, text_dataset, prime="["):
  model.eval()

  hidden = None
  pep_seq = []

  for char in prime:
        pep_seq.append(char)
        x = text_dataset.encode(char)
        x = x.unsqueeze(0)
        outputs, hidden = model(x, hidden)
  while True:
        probabilities = F.softmax(outputs[-1], dim=0).unsqueeze(0)

        ix = torch.multinomial(probabilities, 1).item()
        char = text_dataset.decode([ix])
        pep_seq.append(char)

        if char == "]":
            break

        x = text_dataset.encode(char)
        x = x.unsqueeze(0)
        outputs, hidden = model(x, hidden)

  return ''.join(pep_seq)

torch.manual_seed(1)
model = PeptideosRNNLanguageModel(text_dataset.vocab_size, hidden_size=100)
model.load_state_dict(torch.load('inf721net.pth'))

peptideos_gerados = []
n_peptideos = 100
for i in range(n_peptideos):
  cpps = generate(model, text_dataset)
  peptideo_limpo = cpps.strip('[]')
  print(peptideo_limpo)
  if (5 <= len(peptideo_limpo) <= 20):
    peptideos_gerados.append(peptideo_limpo)





frequencia_aminoacidos = Counter()
for peptideo in peptideos_gerados:
    frequencia_aminoacidos.update(peptideo.replace("[", "").replace("]", ""))  # Remover os caracteres especiais

# Preparar os dados para plotagem
aminoacidos = list(frequencia_aminoacidos.keys())
frequencias = list(frequencia_aminoacidos.values())

# Criar o gráfico de barras
plt.figure(figsize=(12, 6))
plt.bar(aminoacidos, frequencias, color='blue')
plt.xlabel('Aminoácidos')
plt.ylabel('Frequência')
plt.title('Frequência dos Aminoácidos em Peptídeos Gerados pelo Modelo')
plt.show()


# Inicialize um dicionário para armazenar as frequências
frequencia_posicao = defaultdict(lambda: defaultdict(int))
max_len = max(len(peptideo) for peptideo in peptideos_gerados)

# Contagem de frequências
for peptideo in peptideos_gerados:
    for pos, aminoacido in enumerate(peptideo):
        frequencia_posicao[pos][aminoacido] += 1

# Preparando os dados para a plotagem
freq_matrix = np.zeros((len(frequencia_posicao), 20))  # 20 é o número de aminoácidos diferentes
aminoacidos = sorted(list({aa for pept in peptideos_gerados for aa in pept}))

for pos in frequencia_posicao:
    for ix, aa in enumerate(aminoacidos):
        freq_matrix[pos, ix] = frequencia_posicao[pos].get(aa, 0)

# Plotando um gráfico de calor
plt.figure(figsize=(15, 10))
plt.imshow(freq_matrix, cmap='hot', interpolation='nearest')
plt.xlabel('Aminoácidos')
plt.ylabel('Posição na Sequência')
plt.xticks(ticks=range(len(aminoacidos)), labels=aminoacidos)
plt.yticks(ticks=range(max_len))
plt.colorbar()
plt.title('Frequência de Aminoácidos por Posição nos Peptídeos')
plt.show()