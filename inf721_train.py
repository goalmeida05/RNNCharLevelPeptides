# -*- coding: utf-8 -*-
"""inf721_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HZWtKysWx3B-UJOPGWwjFk7eV3r4bGGH
"""

import torch
import sys
import torch.optim as optim
from torch.nn.utils import clip_grad_norm_
import torch.nn as nn
from inf721_dataset import PeptideosDataset
from inf721_dataset import train_loader
from inf721_model import PeptideosRNNLanguageModel

text_dataset = PeptideosDataset('Dados.txt')
def optimize(model, train_loader, vocab_size, learning_rate=0.001, num_epochs=500, outpath='inf721net.pth'):
  ### SEU CÓDIGO COMEÇA AQUI ### ~23 linhas
  model.train()
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
  criterion = nn.CrossEntropyLoss()
  train_losses = []

  for epoch in range(num_epochs):
        total_loss = 0

        for x, y in train_loader:
            optimizer.zero_grad()

            # Inicializar o estado escondido com None
            hidden = None

            # Forward pass
            outputs, hidden = model(x, hidden)

            # Calcular a perda
            loss = criterion(outputs, y.view(-1))
            total_loss += loss.item()

            # Backward pass e otimização
            loss.backward()

            # Gradient Clipping
            clip_grad_norm_(model.parameters(), 5)

            optimizer.step()

        # Calcular a perda média por mini-batch
        avg_loss = total_loss / len(train_loader)
        train_losses.append(avg_loss)

        # Imprimir a perda a cada 10 épocas
        if epoch % 10 == 0 or epoch == num_epochs - 1:
            print(f"Epoch [{epoch}/{num_epochs}], Loss: {avg_loss:.4f}")

    # Salvar o modelo treinado
  torch.save(model.state_dict(), outpath)

  return train_losses
  ### SEU CÓDIGO TERMINA AQUI ###


#------------------------------------------------------------------------------#
#-----------------------------Treinando o Modelo-------------------------------#
#------------------------------------------------------------------------------#
torch.manual_seed(1)

model = PeptideosRNNLanguageModel(text_dataset.vocab_size, hidden_size=100)

train_losses = optimize(model, train_loader, text_dataset.vocab_size)
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#