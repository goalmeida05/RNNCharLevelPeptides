# -*- coding: utf-8 -*-
"""inf721_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LSZga9_MqsJci5GrEuyn9LZ5jGhDehBU
"""

import torch
import sys
from inf721_dataset import PeptideosDataset
import torch.nn as nn

text_dataset = PeptideosDataset('Dados.txt')

class PeptideosRNN(torch.nn.Module):
    def __init__(self, input_size, hidden_size):
        super(PeptideosRNN, self).__init__()

        self.input_size = input_size
        self.hidden_size = hidden_size

        self.Wx = nn.Parameter(torch.randn(hidden_size, input_size) * 0.01)
        self.Wh = nn.Parameter(torch.randn(hidden_size, hidden_size) * 0.01)
        self.b = nn.Parameter(torch.zeros(hidden_size))


    def forward(self, x, h_prev):
        batch_size, sequence_length, _ = x.size()

        if h_prev is None:
            h_prev = torch.zeros(batch_size, self.hidden_size, device=x.device)

        hidden_states = []

        for t in range(sequence_length):
            x_t = x[:, t, :]
            h_t = torch.tanh(torch.mm(h_prev, self.Wh.t()) + torch.mm(x_t, self.Wx.t()) + self.b)
            hidden_states.append(h_t)
            h_prev = h_t

        outputs = torch.cat(hidden_states, dim=0).view(sequence_length, batch_size, self.hidden_size)
        outputs = outputs.permute(1, 0, 2)

        return outputs, h_t


class PeptideosRNNLanguageModel(torch.nn.Module):
    def __init__(self, vocab_size, hidden_size):
        super(PeptideosRNNLanguageModel, self).__init__()
        self.rnn = PeptideosRNN(input_size=vocab_size, hidden_size=hidden_size)
        self.fc = nn.Linear(hidden_size, vocab_size)

    def forward(self, x, hidden):

        outputs, hidden = self.rnn(x, hidden)

        outputs = outputs.contiguous().view(-1, self.rnn.hidden_size)

        outputs = self.fc(outputs)

        return outputs, hidden


#------------------------------------------------------------------------------#
#--------------------Verificação do modelo de linguagem------------------------#
#------------------------------------------------------------------------------#
torch.manual_seed(1)
x, y = text_dataset[0]

language_model = PeptideosRNNLanguageModel(vocab_size=text_dataset.vocab_size, hidden_size=10)
with torch.no_grad():
  outputs, hidden = language_model(x.unsqueeze(0), None)

print("Outputs size:", outputs.size())
print("Hidden state:", hidden)
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#